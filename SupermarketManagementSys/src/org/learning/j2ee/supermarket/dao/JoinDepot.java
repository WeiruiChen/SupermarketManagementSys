package org.learning.j2ee.supermarket.dao;

import java.io.Serializable;

/**
 * JoinDepot Value Object.
 * This class is value object representing database table JoinDepot
 * This class is intented to be used together with associated Dao object.
 */

/**
 * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
 * The usage of generated code is restricted to OpenSource software projects
 * only. DaoGen is available in http://titaniclinux.net/daogen/ It has been
 * programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
 * 
 * DaoGen license: The following DaoGen generated source code is licensed under
 * the terms of GNU GPL license. The full text for license is available in GNU
 * project's pages: http://www.gnu.org/copyleft/gpl.html
 * 
 * If you wish to use the DaoGen generator to produce code for closed-source
 * commercial applications, you must pay the lisence fee. The price is 5 USD or
 * 5 Eur for each database table, you are generating code for. (That includes
 * unlimited amount of iterations with all supported languages for each database
 * table you are paying for.) Send mail to "Tuomo.Lukka@iki.fi" for more
 * information. Thank you!
 */

public class JoinDepot implements Cloneable, Serializable {

	/**
	 * Persistent Instance variables. This data is directly mapped to the
	 * columns of database table.
	 */
	private int id;
	private String orderId;
	private int depoId;
	private String wareName;
	private String joinTime;
	private double weight;
	private String remark;

	/**
	 * Constructors. DaoGen generates two constructors by default. The first one
	 * takes no arguments and provides the most simple way to create object
	 * instance. The another one takes one argument, which is the primary key of
	 * the corresponding table.
	 */

	public JoinDepot() {

	}

	public JoinDepot(int idIn) {

		this.id = idIn;

	}

	/**
	 * Get- and Set-methods for persistent variables. The default behaviour does
	 * not make any checks against malformed data, so these might require some
	 * manual additions.
	 */

	public int getId() {
		return this.id;
	}

	public void setId(int idIn) {
		this.id = idIn;
	}

	public String getOrderId() {
		return this.orderId;
	}

	public void setOrderId(String orderIdIn) {
		this.orderId = orderIdIn;
	}

	public int getDepoId() {
		return this.depoId;
	}

	public void setDepoId(int depoIdIn) {
		this.depoId = depoIdIn;
	}

	public String getWareName() {
		return this.wareName;
	}

	public void setWareName(String wareNameIn) {
		this.wareName = wareNameIn;
	}

	public String getJoinTime() {
		return this.joinTime;
	}

	public void setJoinTime(String joinTimeIn) {
		this.joinTime = joinTimeIn;
	}

	public double getWeight() {
		return this.weight;
	}

	public void setWeight(double weightIn) {
		this.weight = weightIn;
	}

	public String getRemark() {
		return this.remark;
	}

	public void setRemark(String remarkIn) {
		this.remark = remarkIn;
	}

	/**
	 * setAll allows to set all persistent variables in one method call. This is
	 * useful, when all data is available and it is needed to set the initial
	 * state of this object. Note that this method will directly modify instance
	 * variales, without going trough the individual set-methods.
	 */

	public void setAll(int idIn, String orderIdIn, int depoIdIn,
			String wareNameIn, String joinTimeIn, double weightIn,
			String remarkIn) {
		this.id = idIn;
		this.orderId = orderIdIn;
		this.depoId = depoIdIn;
		this.wareName = wareNameIn;
		this.joinTime = joinTimeIn;
		this.weight = weightIn;
		this.remark = remarkIn;
	}

	/**
	 * hasEqualMapping-method will compare two JoinDepot instances and return
	 * true if they contain same values in all persistent instance variables. If
	 * hasEqualMapping returns true, it does not mean the objects are the same
	 * instance. However it does mean that in that moment, they are mapped to
	 * the same row in database.
	 */
	public boolean hasEqualMapping(JoinDepot valueObject) {

		if (valueObject.getId() != this.id) {
			return (false);
		}
		if (this.orderId == null) {
			if (valueObject.getOrderId() != null)
				return (false);
		} else if (!this.orderId.equals(valueObject.getOrderId())) {
			return (false);
		}
		if (valueObject.getDepoId() != this.depoId) {
			return (false);
		}
		if (this.wareName == null) {
			if (valueObject.getWareName() != null)
				return (false);
		} else if (!this.wareName.equals(valueObject.getWareName())) {
			return (false);
		}
		if (this.joinTime == null) {
			if (valueObject.getJoinTime() != null)
				return (false);
		} else if (!this.joinTime.equals(valueObject.getJoinTime())) {
			return (false);
		}
		if (valueObject.getWeight() != this.weight) {
			return (false);
		}
		if (this.remark == null) {
			if (valueObject.getRemark() != null)
				return (false);
		} else if (!this.remark.equals(valueObject.getRemark())) {
			return (false);
		}

		return true;
	}

	/**
	 * toString will return String object representing the state of this
	 * valueObject. This is useful during application development, and possibly
	 * when application is writing object states in textlog.
	 */
	public String toString() {
		StringBuffer out = new StringBuffer(this.getDaogenVersion());
		out.append("\nclass JoinDepot, mapping to table JoinDepot\n");
		out.append("Persistent attributes: \n");
		out.append("id = " + this.id + "\n");
		out.append("orderId = " + this.orderId + "\n");
		out.append("depoId = " + this.depoId + "\n");
		out.append("wareName = " + this.wareName + "\n");
		out.append("joinTime = " + this.joinTime + "\n");
		out.append("weight = " + this.weight + "\n");
		out.append("remark = " + this.remark + "\n");
		return out.toString();
	}

	/**
	 * Clone will return identical deep copy of this valueObject. Note, that
	 * this method is different than the clone() which is defined in
	 * java.lang.Object. Here, the retuned cloned object will also have all its
	 * attributes cloned.
	 */
	public Object clone() {
		JoinDepot cloned = new JoinDepot();

		cloned.setId(this.id);
		if (this.orderId != null)
			cloned.setOrderId(new String(this.orderId));
		cloned.setDepoId(this.depoId);
		if (this.wareName != null)
			cloned.setWareName(new String(this.wareName));
		if (this.joinTime != null)
			cloned.setJoinTime(new String(this.joinTime));
		cloned.setWeight(this.weight);
		if (this.remark != null)
			cloned.setRemark(new String(this.remark));
		return cloned;
	}

	/**
	 * getDaogenVersion will return information about generator which created
	 * these sources.
	 */
	public String getDaogenVersion() {
		return "DaoGen version 2.4.1";
	}

}
